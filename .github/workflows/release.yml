name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest }
          - { os: windows-latest }

    steps:
      - uses: actions/checkout@v5

      - name: Install ccache (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ccache

      - name: Configure (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build \
            -DWITH_LIBMODBUS=OFF -DWITH_TESTS=OFF \
            -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_VERSION=${GITHUB_REF_NAME#v} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: |
          # Resolve cmake path
          $cm = Get-Command cmake -ErrorAction SilentlyContinue
          if (-not $cm) { $cm = 'C:\Program Files\CMake\bin\cmake.exe' }
          echo "CMAKE_EXE=$cm" | Out-File -FilePath $env:GITHUB_ENV -Append
          & "$cm" -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DWITH_LIBMODBUS=OFF -DWITH_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_VERSION=$($env:GITHUB_REF_NAME.TrimStart('v')) -DPACKAGE_PDB=ON

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Package (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          (cd build && cpack -C Release)
          echo "Generated packages:" && ls -1 build/*.zip build/*.tar.gz 2>/dev/null || true

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Push-Location build
          $cp = Get-Command cpack -ErrorAction SilentlyContinue
          if (-not $cp) { $cp = 'C:\Program Files\CMake\bin\cpack.exe' }
          & "$cp" -C Release
          Pop-Location
          Write-Host "Generated packages:"; Get-ChildItem build -Filter *.zip -Recurse | % FullName

      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/*.zip
            build/*.tar.gz
            build/*.sha256
          fail_on_unmatched_files: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

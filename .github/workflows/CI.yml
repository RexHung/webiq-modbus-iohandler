# This is a basic workflow to help you get started with Actions
# 備註：
# unit 工作只做編譯＋（可選）CTests（若暫未加測試程式，先允許通過）。
# integration 工作安裝 libmodbus-dev，以 pymodbus 啟用 TCP 模擬器，然後跑我們的 E2E 測試程式。


name: CI

# Controls when the workflow will run
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # ------------------------------------------
  # Unit / Component（無外部依賴，stub backend）
  # - 以 matrix 控制是否編譯測試 (WITH_TESTS=ON/OFF)
  # - 可在 Windows / Ubuntu 上各跑一次
  # ------------------------------------------
  unit:
    name: Unit (${{ matrix.os }}, arch=${{ matrix.arch }}, WITH_TESTS=${{ matrix.with_tests }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { os: ubuntu-latest,  arch: x86_64, with_tests: ON }
          - { os: ubuntu-latest,  arch: x86_64, with_tests: OFF }
          - { os: ubuntu-latest,  arch: i386,   with_tests: ON }
          - { os: ubuntu-latest,  arch: armhf,  with_tests: ON }
          - { os: ubuntu-latest,  arch: arm64,  with_tests: ON }
          # Windows
          - { os: windows-latest, arch: win64,  with_tests: ON }
          - { os: windows-latest, arch: win32,  with_tests: ON }
    steps:
      - uses: actions/checkout@v4

      # Cache pip across jobs
      - name: Cache pip (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install ccache (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ccache

      # Linux: install toolchains as needed
      - name: Install cross/multilib deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          case "${{ matrix.arch }}" in \
            i386) \
              sudo dpkg --add-architecture i386; \
              sudo apt-get update; \
              sudo apt-get install -y g++-multilib libc6:i386 libstdc++6:i386 ;; \
            armhf) \
              sudo dpkg --add-architecture armhf; \
              # Limit default ubuntu mirrors to native arch to avoid 404 for foreign arches
              sudo sed -i -E 's/^deb ([^[])/deb [arch=amd64] \1/' /etc/apt/sources.list || true; \
              for f in /etc/apt/sources.list.d/*.list; do sudo sed -i -E 's/^deb ([^[])/deb [arch=amd64] \1/' "$f" || true; done; \
              codename=$( . /etc/os-release && echo "$VERSION_CODENAME" ); \
              echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $codename main universe multiverse restricted" | sudo tee /etc/apt/sources.list.d/armhf-ports.list >/dev/null; \
              echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $codename-updates main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/armhf-ports.list >/dev/null; \
              echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $codename-security main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/armhf-ports.list >/dev/null; \
              sudo apt-get update || true; \
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
                qemu-user qemu-user-static binfmt-support \
                libc6:armhf libstdc++6:armhf ;; \
            arm64) \
              sudo dpkg --add-architecture arm64; \
              sudo sed -i -E 's/^deb ([^[])/deb [arch=amd64] \1/' /etc/apt/sources.list || true; \
              for f in /etc/apt/sources.list.d/*.list; do sudo sed -i -E 's/^deb ([^[])/deb [arch=amd64] \1/' "$f" || true; done; \
              codename=$( . /etc/os-release && echo "$VERSION_CODENAME" ); \
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $codename main universe multiverse restricted" | sudo tee /etc/apt/sources.list.d/arm64-ports.list >/dev/null; \
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $codename-updates main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list >/dev/null; \
              echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $codename-security main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list >/dev/null; \
              sudo apt-get update || true; \
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
                qemu-user qemu-user-static binfmt-support \
                libc6:arm64 libstdc++6:arm64 ;; \
            *) ;; \
          esac

      # Configure by arch/OS
      - name: Configure (Linux x86_64)
        if: runner.os == 'Linux' && matrix.arch == 'x86_64'
        run: cmake -S . -B build -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Configure (Linux i386)
        if: runner.os == 'Linux' && matrix.arch == 'i386'
        run: |
          cmake -S . -B build -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32

      - name: Configure (Linux armhf)
        if: runner.os == 'Linux' && matrix.arch == 'armhf'
        run: cmake -S . -B build -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/armhf.cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Configure (Linux arm64)
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: cmake -S . -B build -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/arm64.cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Configure (Windows x64)
        if: runner.os == 'Windows' && matrix.arch == 'win64'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release

      - name: Configure (Windows x86)
        if: runner.os == 'Windows' && matrix.arch == 'win32'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A Win32 -DWITH_LIBMODBUS=OFF -DWITH_TESTS=${{ matrix.with_tests }} -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Set unit test regex (Linux)
        if: matrix.with_tests == 'ON' && runner.os == 'Linux'
        run: |
          case "${{ matrix.arch }}" in \
            x86_64|i386) echo "CTEST_REGEX=^unit_.*" >> $GITHUB_ENV ;; \
            armhf|arm64) echo "CTEST_REGEX=^unit_(stub|codec|config_invalid|api_float_swap|api_coils_array)$" >> $GITHUB_ENV ;; \
            *) echo "CTEST_REGEX=^unit_.*" >> $GITHUB_ENV ;; \
          esac

      - name: Set unit test regex (Windows)
        if: matrix.with_tests == 'ON' && runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:RUNNER_OS -eq 'Windows') { $regex = '^unit_.*' } else { $regex = '^unit_.*' }
          "CTEST_REGEX=$regex" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Run unit tests (Linux)
        if: matrix.with_tests == 'ON' && runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          ctest --test-dir build -R "$CTEST_REGEX" --output-on-failure --timeout 60 \
            || (echo "Re-running unit tests verbosely..."; ctest --test-dir build -R "$CTEST_REGEX" -V --timeout 60; exit 1)

      - name: Run unit tests (Windows)
        if: matrix.with_tests == 'ON' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $ok = $true
          try {
            ctest --test-dir build -C Release -R "$env:CTEST_REGEX" --output-on-failure --timeout 60
          } catch {
            $ok = $false
          }
          if (-not $ok) {
            Write-Host "Re-running unit tests verbosely..."
            ctest --test-dir build -C Release -R "$env:CTEST_REGEX" -V --timeout 60
            exit 1
          }

      - name: Run unit tests under QEMU (Linux ARM)
        if: matrix.with_tests == 'ON' && runner.os == 'Linux' && (matrix.arch == 'armhf' || matrix.arch == 'arm64')
        env:
          CTEST_PARALLEL_LEVEL: 1
        run: ctest --test-dir build -R "$CTEST_REGEX" --output-on-failure --timeout 180

      - name: Upload unit test logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-unit-${{ matrix.os }}-${{ matrix.arch }}-tests_${{ matrix.with_tests }}
          path: |
            build/Testing
            build/LastTest.log
            build/**/LastTest.log

      # Cache ccache objects
      - name: Cache ccache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.os }}-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.os }}-${{ matrix.arch }}-

  # ------------------------------------------------------
  # Integration（libmodbus + Modbus TCP 模擬器 via PORT）
  # - 以 matrix 同步開多個埠號做平行測試
  # - WITH_TESTS 固定 ON（需要建 test_e2e）
  # ------------------------------------------------------
  integration:
    name: Integration (${{ matrix.os }}, arch=${{ matrix.arch }}, port=${{ matrix.port }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        include:
          - { os: ubuntu-latest,  arch: x86_64, port: 1502 }
          - { os: windows-latest, arch: win64,  port: 1502, triplet: x64-windows }
          - { os: windows-latest, arch: win32,  port: 1502, triplet: x86-windows }
    env:
      PORT: ${{ matrix.port }}

    steps:
      - uses: actions/checkout@v4

      # Cache pip for integration
      - name: Cache pip (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Cache pip (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}
          restore-keys: |
            pip-${{ runner.os }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pymodbus
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pymodbus<3"

      # Linux deps: libmodbus via apt
      - name: Install libmodbus (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libmodbus-dev

      # Windows deps: libmodbus via vcpkg (bootstrap without actions)
      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $root = "$env:USERPROFILE\vcpkg"
          if (-not (Test-Path $root)) {
            git clone --depth 1 https://github.com/microsoft/vcpkg $root
            & $root\bootstrap-vcpkg.bat -disableMetrics
          }
          "VCPKG_ROOT=$root" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache vcpkg installed (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}
            ${{ env.VCPKG_ROOT }}\packages
            ${{ env.VCPKG_ROOT }}\buildtrees
          key: vcpkg-${{ matrix.triplet }}
          restore-keys: |
            vcpkg-${{ matrix.triplet }}

      - name: Install libmodbus (Windows via vcpkg)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $triplet = '${{ matrix.triplet }}'
          & $env:VCPKG_ROOT\vcpkg.exe install "libmodbus:$triplet"
          $bin = Join-Path $env:VCPKG_ROOT ("installed\$triplet\bin")
          "PATH=$env:PATH;$bin" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Start Modbus TCP simulator (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          echo "Starting simulator on port $PORT"
          echo "Python version: $(python --version 2>&1)"
          python - <<'PY'
import sys
try:
    import pymodbus
    print('pymodbus version:', getattr(pymodbus, '__version__', 'unknown'))
except Exception as e:
    print('import pymodbus failed:', e)
    sys.exit(1)
PY
          nohup python tests/integration/modbus_sim.py >/tmp/modbus_sim.log 2>&1 &
          SIM_PID=$!
          echo "simulator pid=$SIM_PID"
          # Probe readiness for up to ~40s using bash /dev/tcp
          for i in {1..40}; do
            sleep 1
            if (echo > /dev/tcp/127.0.0.1/$PORT) >/dev/null 2>&1; then
              echo "Simulator is ready on port $PORT"; break
            fi
          done
          if ! (echo > /dev/tcp/127.0.0.1/$PORT) >/dev/null 2>&1; then
            echo "ERROR: Simulator not reachable on port $PORT"; echo "-- sim log tail --"; tail -n 200 /tmp/modbus_sim.log || true; exit 1
          fi

      - name: Start Modbus TCP simulator (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Starting simulator on port $env:PORT"
          Start-Process -FilePath python -ArgumentList 'tests/integration/modbus_sim.py'
          # Longer warm-up and readiness probe on Windows
          $deadline = (Get-Date).AddSeconds(25)
          $ok = $false
          do {
            Start-Sleep -Seconds 1
            try {
              $t = Test-NetConnection -ComputerName 127.0.0.1 -Port $env:PORT -WarningAction SilentlyContinue
              if ($t.TcpTestSucceeded) { $ok = $true }
            } catch { }
          } until ($ok -or (Get-Date) -gt $deadline)
          if (-not $ok) { Write-Error "Simulator not reachable on port $env:PORT"; exit 1 }

      - name: Prepare CI config (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          mkdir -p config
          cat > config/ci.modbus.json <<JSON
          {
            "transport": "tcp",
            "tcp": { "host": "127.0.0.1", "port": $PORT, "timeout_ms": 1000 },
            "items": [
              { "name": "coil.run",      "unit_id": 1, "function": 1,  "address": 10,  "type": "bool",  "poll_ms": 100 },
              { "name": "holding.temp",  "unit_id": 1, "function": 3,  "address": 0,   "type": "int16", "scale": 0.1, "poll_ms": 100 },
              { "name": "ai.flow",       "unit_id": 1, "function": 4,  "address": 100, "type": "float", "poll_ms": 100, "swap_words": false }
            ]
          }
          JSON

      - name: Prepare CI config (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path config | Out-Null
          @"
          {
            "transport": "tcp",
            "tcp": { "host": "127.0.0.1", "port": $env:PORT, "timeout_ms": 1000 },
            "items": [
              { "name": "coil.run",      "unit_id": 1, "function": 1,  "address": 10,  "type": "bool",  "poll_ms": 100 },
              { "name": "holding.temp",  "unit_id": 1, "function": 3,  "address": 0,   "type": "int16", "scale": 0.1, "poll_ms": 100 },
              { "name": "ai.flow",       "unit_id": 1, "function": 4,  "address": 100, "type": "float", "poll_ms": 100, "swap_words": false }
            ]
          }
          "@ | Out-File -FilePath config/ci.modbus.json -Encoding utf8 -Force

      - name: Configure (Ubuntu, WITH_LIBMODBUS=ON, WITH_TESTS=ON)
        if: runner.os == 'Linux'
        run: cmake -S . -B build -DWITH_LIBMODBUS=ON -DWITH_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Configure (Windows, WITH_LIBMODBUS=ON, WITH_TESTS=ON)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          Write-Host "VCPKG_ROOT=$env:VCPKG_ROOT"
          $toolchain = Join-Path $env:VCPKG_ROOT 'scripts/buildsystems/vcpkg.cmake'
          Write-Host "TOOLCHAIN=$toolchain (exists=$([bool](Test-Path $toolchain)))"
          $arch = '${{ matrix.arch }}'
          if ($arch -eq 'win64') { $genA = 'x64' } else { $genA = 'Win32' }
          # First attempt: quiet configure
          $cfgLog = "build/_ci_cmake_configure.log"
          cmake -S . -B build -A $genA `
            -DWITH_LIBMODBUS=ON -DWITH_TESTS=ON `
            -DCMAKE_BUILD_TYPE=Release `
            -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}' `
            "-DCMAKE_TOOLCHAIN_FILE=$toolchain"
          $code = $LASTEXITCODE
          if ($code -ne 0) {
            Write-Host "Configure failed. Retrying with verbose find debug..."
            cmake -S . -B build -A $genA `
              -DWITH_LIBMODBUS=ON -DWITH_TESTS=ON `
              -DCMAKE_BUILD_TYPE=Release `
              -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}' `
              "-DCMAKE_TOOLCHAIN_FILE=$toolchain" `
              -DCMAKE_FIND_DEBUG_MODE=ON --log-level=VERBOSE 2>&1 | Tee-Object -FilePath $cfgLog
            $code2 = $LASTEXITCODE
            Write-Host "--- cmake configure log (tail) ---"
            if (Test-Path $cfgLog) { Get-Content $cfgLog | Select-Object -Last 400 }
            Write-Host "--- CMakeError.log (tail) ---"
            Get-Content build\CMakeFiles\CMakeError.log -ErrorAction SilentlyContinue | Select-Object -Last 200
            Write-Host "--- CMakeOutput.log (tail) ---"
            Get-Content build\CMakeFiles\CMakeOutput.log -ErrorAction SilentlyContinue | Select-Object -Last 200
            Write-Host "--- CMakeCache.txt (tail) ---"
            Get-Content build\CMakeCache.txt -ErrorAction SilentlyContinue | Select-Object -Last 200
            Write-Host "--- build directory snapshot ---"
            Get-ChildItem -Recurse build | Select-Object -First 200
            exit $code2
          } else {
            Write-Host "Configure succeeded. Listing build directory:"
            Get-ChildItem -Recurse build | Select-Object -First 100
          }

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake --build build --config Release --parallel
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed. Listing build directory:"
            Get-ChildItem -Recurse build | Select-Object -First 200
            exit 1
          }

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --config Release --parallel

      - name: List artifacts and ensure DLLs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "--- build/Release contents ---"
          Get-ChildItem build\Release | Format-Table -AutoSize
          $bin = Join-Path $env:VCPKG_ROOT 'installed\x64-windows\bin'
          if (Test-Path $bin) {
            Write-Host "Copying vcpkg runtime DLLs to build\\Release"
            Copy-Item "$bin\*.dll" build\Release -ErrorAction SilentlyContinue
          }
          if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
            Write-Host "--- dumpbin test_e2e.exe ---"
            dumpbin /DEPENDENTS build\Release\test_e2e.exe | Select-Object -First 200
            Write-Host "--- dumpbin ioh_modbus.dll ---"
            dumpbin /DEPENDENTS build\Release\ioh_modbus.dll | Select-Object -First 200
          } else {
            Write-Host "dumpbin not found; skipping dependency dump"
          }

      - name: Run E2E integration test (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          ctest --test-dir build -R e2e --output-on-failure --timeout 120 \
            || (echo "Re-running E2E verbosely..."; ctest --test-dir build -R e2e -V --timeout 120; exit 1)

      - name: Run E2E integration test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ok = $true
          try {
            ctest --test-dir build -C Release -R e2e --output-on-failure --timeout 120
          } catch {
            $ok = $false
          }
          if (-not $ok) {
            Write-Host "Re-running E2E verbosely..."
            ctest --test-dir build -C Release -R e2e -V --timeout 120
            exit 1
          }

      - name: Show dependency info (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "-- ldd test_e2e --" || true
          ldd ./build/tests/integration/test_e2e || true
          echo "-- locate and ldd ioh_modbus --" || true
          find build -type f -name "libioh_modbus*.so" -print -exec ldd {} \; || true

      - name: Show PATH and files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "PATH=$env:PATH"
          Get-ChildItem -Recurse build -Filter ioh_modbus*.dll | Select-Object -First 10 -ExpandProperty FullName

      - name: Upload integration logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs-${{ matrix.os }}-${{ matrix.arch }}-port_${{ matrix.port }}
          path: |
            build/_ci_cmake_configure.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
            build/CMakeCache.txt
            build/Testing
            build/LastTest.log
            build/**/LastTest.log
